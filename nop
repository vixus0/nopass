#!/usr/bin/env python

import hashlib, argparse, os, sys

try:
    import cPickle as pkl
except ImportError:
    import pickle as pkl

DEFAULT_DB = os.environ['HOME'] + '/.pwdb'
DEFAULT_TYPE = '(user)[tab](password)'
ROW_FIELDS = ['name', 'user', 'target', 'win', 'trunc', 'sub', 'type']


## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 


def mkpass(entry, phrase):
    """Creates hash from database entry and passphrase."""
    h = hashlib.sha256()
    h.update(phrase.encode('utf-8'))
    h.update(entry['name'].encode('utf-8'))
    pw = h.hexdigest()[:entry['trunc']]
    if entry['sub']:
        for s in entry['sub']:
            pw = pw.replace(s[0], s[1])
    return pw


def is_exe(exe):
    """Checks PATH for existence of executable."""
    for path in os.environ["PATH"].split(os.pathsep):
        f = os.path.join(path, exe)
        if os.path.isfile(f) and os.access(f, os.X_OK):
            return True


def needs(exe):
    if not is_exe(exe):
        print('Requires {}!'.format(exe))
        sys.exit(1)


def dmenu_getpass():
    """Opens a dmenu prompt to get the passphrase."""
    from subprocess import Popen, PIPE, TimeoutExpired

    dm = 'dmenu'
    needs(dm)

    proc = Popen([dm, '-p', 'Passphrase:'], stdin=PIPE, stdout=PIPE, stderr=PIPE)

    try:
        nl = '\n'.encode('utf-8')
        out, err = proc.communicate(input=nl, timeout=60)
    except TimeoutExpired:
        proc.kill()
        out, err = proc.communicate()
        return None

    proc.wait()

    phrase = out.decode('utf-8')
    return phrase


def term_getpass():
    """Prompts on the tty for passphrase."""
    from getpass import getpass
    return getpass('Passphrase: ')


def get_active_title():
    """Gets the active window title."""
    from subprocess import Popen, PIPE, TimeoutExpired

    xd = 'xdotool'
    needs(xd)

    proc = Popen([xd, 'getactivewindow', 'getwindowname'], stdin=None, stdout=PIPE, stderr=PIPE)

    try:
        out, err = proc.communicate(timeout=60)
    except TimeoutExpired:
        proc.kill()
        out, err = proc.communicate()
        return None

    proc.wait()
    title = out.decode('utf-8')
    return title


def focus_window(name):
    """Focus a window with xdotool."""
    from subprocess import call
    xd = 'xdotool'
    needs(xd)
    call([xd, 'search', '--name', name, 'windowfocus', '--sync'])
    

def sanitize(ostr):
    """Clean up strings."""
    return ostr.lower().strip()


def find_entry(string):
    """Search for an entry based on win field."""

    for name,entry in db.items():
        if 'win' not in entry.keys():
            continue
        else:
            string = sanitize(string)
            substr = sanitize(entry['win'])
            match = string.find(substr)
        if match >= 0:
            return entry
    return None


def autotype(entry, phrase):
    """Autotype the username and password."""
    from subprocess import call

    xd = 'xdotool'
    needs(xd)
    pw = mkpass(entry, phrase)
    cmds = typecmds(entry, pw)
    for cmd in cmds:
        args = [xd, 'getactivewindow'] + cmd
        call(args)


def typecmds(entry, pw):
    """Parses the type command string to xdotool commands."""
    import re

    def repl(m):
        f = m.group(1)
        if f.startswith('pass'):
            return pw
        return entry[f] if f in entry.keys() else ''

    rkey =   re.compile(r'\[(\w+)\]')   # special keys: Esc, Tab, etc.
    rfield = re.compile(r'\((\w+)\)')   # fields: user, target, etc.

    cmds = []
    string = sanitize(entry['type']) if 'type' in entry.keys() else DEFAULT_TYPE

    # First, split on special keys
    tokens = re.split(r'(\[\w+\])', string)

    for t in tokens:
        kmatch = rkey.match(t)
        if kmatch:
            key = kmatch.group(1).capitalize()
            cmds.append(['key', '--clearmodifiers', key])
        else:
            newstr = rfield.sub(repl, t)
            cmds.append(['type', '--clearmodifiers', newstr])

    return cmds


## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 


def argparser():
    """Creates the argument parser for pwdb."""
    ap = argparse.ArgumentParser(description='Simple password manager.')
    ap.add_argument('-f', '--file', help='Database file', default=DEFAULT_DB)

    sub = ap.add_subparsers(title='commands')

    add_parser = sub.add_parser('add', aliases=['a'], help='Add a new entry')
    add_parser.add_argument('entry', help='Entry name')
    add_parser.add_argument('-e', '--edit', help='Modify values in existing entry', action='store_true')
    add_parser.add_argument('-u', '--user', help='Username. Defaults to login name')
    add_parser.add_argument('-t', '--target', help='Website URL or program name')
    add_parser.add_argument('-w', '--win', help='Window name for autotyping', metavar='STR')
    add_parser.add_argument('--trunc', help='Truncate password to N characters', type=int, metavar='N', default=20) 
    add_parser.add_argument('--sub', help='Substitute characters in hash', nargs=2, metavar=('CHAR', 'SUBST'), action='append')
    add_parser.add_argument('--type', help='Type command string', metavar='STR')
    add_parser.set_defaults(run=add)

    del_parser = sub.add_parser('del', aliases=['d'], help='Delete an entry')
    del_parser.add_argument('entry', help='Entry name')
    del_parser.set_defaults(run=delete)

    prn_parser = sub.add_parser('print', aliases=['p'], help='Print an entry to stdout')
    prn_parser.add_argument('entry', help='Entry name')
    for field in ROW_FIELDS:
        prn_parser.add_argument('--'+field, dest='prn_fields', const=field, action='append_const')
    prn_parser.add_argument('--pw', help='Print password IN PLAINTEXT', action='store_true')
    prn_parser.add_argument('--all', help='Print all fields', action='store_true')
    prn_parser.set_defaults(run=prn)

    xdo_parser = sub.add_parser('xdo', aliases=['x'], help='Autotyping with xdotool')
    xdo_parser.add_argument('-n', '--entry', help='Autofocus and autotype based on entry') 
    xdo_parser.set_defaults(run=xdo)

    return ap


def add(db, args):
    """Add database entry."""
    fields = ROW_FIELDS
    args.name = args.entry
    itm = vars(args).items()

    if args.edit:
        if args.entry not in db.keys():
            print("No such entry.")
            return
        for k,v in itm:
            if v:
                db[args.entry][k] = v
    else:
        if args.entry in db.keys():
            print("Entry already exists in database. Use -e to edit instead.")
        else:
            db[args.entry] = {k:v for k,v in itm if k in fields and v}


def delete(db, args):
    """Delete database entry."""
    if args.entry in db.keys():
        del db[args.entry]
    else:
        print("Entry not found.")


def prn(db, args):
    """Print database entry."""
    fields = ROW_FIELDS
    pfields = args.prn_fields

    fmt = "{:<10} {}"

    if args.entry in db.keys():
        entry = db[args.entry]

        if args.pw:
            phrase = term_getpass()

        if args.all:
            pfields = fields

        if pfields:
            [print(fmt.format(k, entry[k])) for k in pfields if k in entry.keys()]

        if args.pw:
            print(fmt.format('password', mkpass(entry, phrase)))
    else:
        print("Entry not found.")


def xdo(db, args):
    """Autotyping with xdotool."""

    phrase = dmenu_getpass()

    if args.entry:
        # Focus the window and start typing
        entry = db[args.entry]
        focus_window(entry['win'])
        autotype(entry, phrase)
    else:
        # Then we just use the active window 
        title = get_active_title()
        if not title:
            return

        print("Title: "+title)

        # Search in entries
        entry = find_entry(title)
        if entry:
            print("Found entry: "+entry['name'])
            autotype(entry, phrase)
        else:
            print("No matching entry.")
            return


def save_db(db, path):
    """Saves the database file."""
    dirs = os.path.dirname(path)
    if not os.path.isdir(dirs):
        os.makedirs(dirs)
    f = open(path, 'wb')
    pkl.dump(db, f, -1)


def load_db(path):
    """Loads the database file."""
    try:
        d = pkl.load(open(path, 'rb'))
    except (FileNotFoundError, pkl.UnpicklingError) as e:
        print("Error loading database file at: "+path)
        d = {}
    return d


## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 


if __name__ == "__main__":
    ap = argparser()
    args = ap.parse_args()

    if 'run' in vars(args):
        db = load_db(args.file) 
        args.run(db, args)
        save_db(db, args.file)
    else:
        ap.print_help()

